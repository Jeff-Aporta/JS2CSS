"use strict";function _conv(){return React.createElement($FMD,null,React.createElement($h1,null,"Generación y Aplicación Dinámica"),React.createElement($h,null),"El presente documento describe el funcionamiento y las aplicaciones de `JS2CSS`, una herramienta en JavaScript diseñada para simplificar la gestión de estilos CSS mediante la conversión automática de objetos de estilo en código CSS compatible. Mediante dos funciones principales, `parseCSS` e `insertStyle`, esta herramienta permite la generación y aplicación dinámica de estilos en documentos HTML, lo que facilita la creación de interfaces complejas y estilos personalizados en aplicaciones interactivas.",React.createElement($p,null,"`parseCSS` se encarga de transformar objetos de estilo en texto CSS, mientras que `insertStyle` inyecta los estilos generados directamente en el DOM, con un sistema optimizado para evitar la duplicación de estilos y mejorar el mantenimiento del código. La herramienta también admite reglas CSS anidadas y proporciona opciones avanzadas para la personalización de formatos y unidades."),React.createElement($$h,null),React.createElement($hr,null),React.createElement($$h,null),React.createElement(a,null),React.createElement($$h,null),React.createElement($hr,null),React.createElement($$h,null),React.createElement(e,null));function e(){return React.createElement(_,null,React.createElement($index,{label:"insertStyle",variant:"h1"},"JS2CSS.insertStyle(props)"),React.createElement($$h,null),React.createElement($CardF,{className:"pad-10px"},"La función `insertStyle` permite convertir y aplicar dinámicamente estilos CSS a partir de un objeto de estilo en JavaScript. Empaqueta todos los parámetros necesarios dentro del objeto `props`, lo que facilita la manipulación de estilos y optimiza la inserción de CSS en el documento HTML. Además, gestiona la creación de nuevos elementos `<style>` y la actualización de los existentes, evitando la duplicación de estilos.",React.createElement($CardDef,{title:"Sintaxis",elevation:0},React.createElement($PR,{lang:"javascript"},"insertStyle({ style, id, objJs, infer, decimalsInfer, clasesKebab })")),React.createElement($CardDef,{title:"Parámetros:",variant:"2",elevation:0},React.createElement($CardDef,{title:"style"},"(Elemento `style`, opcional): El nodo de tipo `style` donde se inyectarán los estilos generados. Si no se proporciona, la función buscará un nodo existente en el `<head>` usando el `id` proporcionado, o creará uno nuevo si no se encuentra."),React.createElement($CardDef,{title:"id"},"(String, opcional): El identificador único que se usará para buscar un elemento `style` específico en el `<head>`. Si no se proporciona, se creará un nuevo nodo `style`."),React.createElement($CardDef,{title:"objJs"},"(Objeto, obligatorio): El objeto JavaScript que contiene los estilos a convertir a CSS. Cada clave del objeto puede ser una regla de estilo CSS o una clase, y las propiedades deben seguir el formato camelCase."),React.createElement($CardDef,{title:"infer"},"(booleano, opcional): Define si se debe agregar automáticamente la unidad `px` a los valores numéricos. El valor predeterminado es `true`, lo que agrega `px` a las propiedades que lo requieran, excepto las incluidas en la lista `attrs_no_inferPx`."),React.createElement($CardDef,{title:"decimalsInfer"},"(número, opcional): Especifica la precisión decimal cuando se convierte un número a `px`. Predeterminado a `3`, lo que redondea los valores a tres decimales."),React.createElement($CardDef,{title:"clasesKebab"},"(booleano, opcional): Indica si los nombres de las clases deben convertirse de `camelCase` a `kebab-case`. Predeterminado a `true`, lo que facilita la compatibilidad con la sintaxis CSS.")),React.createElement($CardDef,{title:"Detalles Técnicos",variant:"2",elevation:0},React.createElement($CardDef,{title:"Selección o Creación de `style`:"},"Si el parámetro `style` no es proporcionado, la función buscará un nodo `<style>` existente con el `id` especificado. Si no se encuentra, creará un nuevo elemento `<style>`."),React.createElement($CardDef,{title:"Inserción de Estilos:"},"Si el nodo `style` no está ya presente en el `<head>`, se agrega dinámicamente. Luego, los estilos generados se inyectan en el `innerHTML` del nodo `style`."),React.createElement($CardDef,{title:"Conversión de Estilos:"},"Los estilos en formato `camelCase` se transforman automáticamente a `kebab-case` para cumplir con la sintaxis de CSS. Los valores numéricos reciben la unidad `px` a menos que estén en la lista `attrs_no_inferPx`.")),React.createElement($CardDef,{title:"Ejemplo de Uso:",variant:"2",elevation:0},React.createElement($CardDef,{title:"Caso 1: Creación de un nuevo `<style>`:"},React.createElement($PR,{lang:"javascript",src:"static/jsx/fragments/code-01.txt"}),"Este código creará un nuevo `<style>` en el `<head>` e inyectará el siguiente CSS:",React.createElement($PR,{lang:"css",src:"static/jsx/fragments/code-02.txt"})),React.createElement($CardDef,{title:"Caso 2: Reutilización de un `<style>` existente:"},React.createElement($PR,{lang:"javascript",src:"static/jsx/fragments/code-03.txt"}),'Este código actualizará el contenido del nodo `<style>` existente con el `id` "estilo-dinamico", en lugar de crear un nuevo nodo. Los estilos en el `<style>` se actualizarán, evitando la duplicación de estilos en el documento.'),React.createElement($CardDef,{title:"Retorno:"},"La función retorna el nodo `style` donde se insertaron los estilos."))))}function a(){return React.createElement(_,null,React.createElement($index,{label:"parseCSS",variant:"h1"},"JS2CSS.parseCSS(props)"),React.createElement($$h,null),"La función `parseCSS` (implementada como `JS2CSS`) convierte un objeto de estilo en JavaScript (`objJs`) a una cadena de texto compatible con CSS. Esta función facilita el manejo de estilos directamente desde JavaScript, con opciones avanzadas de personalización para adaptar la conversión a distintas necesidades.",React.createElement($h,null),React.createElement($CardDef,{title:"Sintaxis"},React.createElement($PR,{lang:"javascript",elevation:0},"parseCSS({ objJs, infer = true, decimalsInfer = 3, clasesKebab = true })")),React.createElement($CardDef,{title:"Parámetros",variant:"2"},"Los parámetros de la función parseCSS permiten personalizar el proceso de conversión de un objeto JavaScript a una cadena de texto CSS.",React.createElement($CardDef,{title:"objJs",elevation:0},"Objeto JavaScript que contiene los estilos a convertir. Cada clave del objeto puede ser una regla de estilo CSS o una clase. Las propiedades pueden seguir el formato `camelCase`."),React.createElement($CardDef,{title:"infer",elevation:0},"**(booleano, opcional):** Define si se debe agregar automáticamente la unidad `px` a valores numéricos. El valor predeterminado es `true`, lo que agrega `px` a las propiedades que lo requieran, excepto las incluidas en la lista `attrs_no_inferPx`."),React.createElement($CardDef,{title:"decimalsInfer",elevation:0},"**(número, opcional):** Especifica la precisión decimal cuando se convierte un número a `px`. Predeterminado a `3`, lo que redondea los valores a tres decimales."),React.createElement($CardDef,{title:"clasesKebab",elevation:0},"**(booleano, opcional):** Indica si los nombres de las clases deben convertirse de `camelCase` a `kebab-case`. Predeterminado a `true`, lo que facilita la compatibilidad con la sintaxis CSS.")),React.createElement($CardDef,{title:"Detalles Técnicos",variant:"2"},"Los detalles técnicos de la función parseCSS describen cómo se manejan internamente los objetos JavaScript para generar una cadena CSS válida.",React.createElement($CardDef,{title:"Conversión de CamelCase a Kebab-Case",elevation:0},"Las claves de estilo que siguen el formato `camelCase` se transforman automáticamente a `kebab-case`, un requisito de CSS. Esto se aplica a todas las propiedades de estilo y, si `clasesKebab` es `true`, también a las clases y selectores."),React.createElement($CardDef,{title:"Manejo Inteligente de Unidades",elevation:0},"Para los valores numéricos, la función añade la unidad `px` por defecto, a menos que la clave se encuentre en `attrs_no_inferPx`. La lista de `attrs_no_inferPx` contiene propiedades como `z-index`, `scale`, `opacity`, entre otras, que no requieren unidades."),React.createElement($CardDef,{title:"Conversión de Objetos a CSS",elevation:0},"La función convierte el objeto `objJs` en una cadena de texto compatible con CSS usando `JSON.stringify`, seguido de una serie de reemplazos para limpiar el formato:",React.createElement($ul,null,React.createElement($li,null,"Se eliminan comas después de cada declaración."),React.createElement($li,null,"Se eliminan los dos puntos antes de llaves `{ }`."),React.createElement($li,null,"Se eliminan comillas dobles para evitar errores de formato en CSS."),React.createElement($li,null,"Se remueven los saltos de línea innecesarios.")))),React.createElement($CardDef,{title:"Ejemplo de Uso"},React.createElement($PR,{lang:"javascript",elevation:0},loadStringsSync("static/jsx/fragments/code-04.txt")),"Este código generará el siguiente CSS:",React.createElement($PR,{lang:"css",elevation:0},loadStringsSync("static/jsx/fragments/code-05.txt"))),React.createElement($CardDef,{title:"Compatibilidad con Reglas Anidadas"},"`JS2CSS` permite definir reglas anidadas en `objJs`, lo que permite generar estilos complejos sin necesidad de una estructura CSS externa."),React.createElement($CardDef,{title:"Flexibilidad para Debugging"},"Con `clasesKebab`, los nombres de clases se pueden adaptar automáticamente a `kebab-case`, facilitando la identificación y seguimiento de estilos en el navegador."))}}function initApp(){Object.assign(config_template,{banner:{left:{label:"Documentación",logo:"static/img/logo.svg"},right:{social:{github:{label:"Jeff-Aporta",url:"https://github.com/Jeff-Aporta"},youtube:{label:"YouTube",url:"https://www.youtube.com/@JeffAporta"},whatsapp:{label:"WhatsApp",url:"https://wa.link/1tmqmt"},telegram:{label:"Telegram",url:"https://t.me/jeffAporta"}}}},mapSite:[{lbl:" "},{component:function(){return React.createElement(_masEnMiPortafolio,null)}},{lbl:" - "},{lbl:"Empecemos"},{lbl:"Introducción",id:"intro",content:function(){return React.createElement(_intro,null)},i:"fa-regular fa-file-lines"},{lbl:" "},{lbl:"Uso"},{lbl:"Conversión e inyección",id:"conv",content:function(){return React.createElement(_conv,null)},i:"fa-solid fa-person-chalkboard"},{lbl:"  "}],repo:{name:"JS2CSS",url:"https://github.com/Jeff-Aporta/JS2CSS"}}),ReactDOM.render(React.createElement(App,null),document.getElementById("root")),changeContent({id:get_id_param()})}var sep=React.createElement(_,null,React.createElement($$h,null),React.createElement($hr,null),React.createElement($$h,null));function _intro(){var e=React.createElement(_,null,React.createElement($$h,null),React.createElement($hr,null),React.createElement($$h,null));return React.createElement($FMD,null,React.createElement(_$Bienvenido,{name_app:"JS2CSS",img_url:"static/img/app.svg"},"Este código proporciona una solución eficiente para la conversión y aplicación de estilos en proyectos web al transformar objetos de estilo definidos en JavaScript a un formato CSS válido y luego insertarlos directamente en el documento HTML. El proceso comienza con la conversión de los objetos de estilo, que son estructuras de datos en JavaScript, en cadenas de texto que siguen la sintaxis estándar de CSS."),React.createElement($hr,null),React.createElement($$h,null),React.createElement(_$Instalación,{url_cdn:"https://jeff-aporta.github.io/JS2CSS/static/js/index.all.min.js",npm_pack:"js2css-tool"}),e,React.createElement(_$testing,{src_params_iife:{url:"https://jeff-aporta.github.io/JS2CSS/static/js/index.all.min.js",name:"JS2CSS",comment:"{parseCSS: ƒ, insertStyle: ƒ} --\x3e all OK!"},src_params_module:{url:"https://jeff-aporta.github.io/JS2CSS/index.mjs",name:"JS2CSS",comment:"{parseCSS: ƒ, insertStyle: ƒ} --\x3e all OK!"}}),e,React.createElement(Card,{className:"pad-10px"},React.createElement($index,{variant:"h3"},"Características principales:"),React.createElement($hr,null),React.createElement($CardDef,{title:"Automatización y Gestión de Estilos CSS",elevation:0},React.createElement($h,null),"Transforma automáticamente las propiedades de estilo de formato `camelCase` a `kebab-case`, evitando posibles errores y reduciendo significativamente el tiempo de desarrollo al eliminar la necesidad de realizar la conversión manualmente. Además, la herramienta es capaz de manejar reglas CSS anidadas (nested CSS rules), permitiendo una mayor flexibilidad y control en la definición de estilos complejos, lo que facilita la organización y mantenimiento de hojas de estilo dinámicas."),React.createElement($CardDef,{title:"Inyección Dinámica de CSS",elevation:0},React.createElement($h,null),"Permite la creación e inyección directa de estilos CSS desde JavaScript, lo que resulta especialmente útil para aplicaciones web interactivas y dinámicas que requieren la personalización de estilos en tiempo real, en función de las condiciones de la aplicación o las interacciones del usuario. Además, facilita el seguimiento y la gestión de los estilos aplicados, lo que es particularmente valioso para exportar archivos con formato, como .xls, asegurando que los estilos se mantengan consistentes y correctamente aplicados en los documentos generados."),React.createElement($CardDef,{title:"Manejo Inteligente de Unidades",elevation:0},"Añade automáticamente la unidad `px` a los valores numéricos cuando sea necesario, garantizando que los estilos se apliquen correctamente y evitando la intervención manual para especificar las unidades, lo que mejora la consistencia y precisión en la definición de los estilos.")))}